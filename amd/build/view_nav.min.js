define([
    'jquery',
    'core/custom_interaction_events',
    'block_myoverview/repository',
    'block_myoverview_plus/view',
    'block_myoverview/selectors'
], function($, CustomEvents, Repository, View, Selectors) {
    "use strict";

    const updatePreferences = (filter, value) => {
        let type = null;
        if (filter === "display") {
            type = "block_myoverview_user_view_preference";
        } else if (filter === "sort") {
            type = "block_myoverview_user_sort_preference";
        } else if (filter === "customfieldvalue") {
            type = "block_myoverview_user_grouping_customfieldvalue_preference";
        } else {
            type = "block_myoverview_user_grouping_preference";
        }

        Repository.updateUserPreferences({
            preferences: [{ type: type, value: value }]
        });
    };

    return {
        init: function(root) {
            root = $(root);
            const Selector = root.find(Selectors.FILTERS);

            CustomEvents.define(Selector, [CustomEvents.events.activate]);

            Selector.on(CustomEvents.events.activate, Selectors.FILTER_OPTION, function(e, data) {
                const option = $(e.target);
                if (option.hasClass("active")) {
                    return;
                }

                const filter = option.attr("data-filter"),
                    pref = option.attr("data-pref"),
                    customfieldvalue = option.attr("data-customfieldvalue");

                root.find(Selectors.courseView.region)
                    .attr("data-" + filter, option.attr("data-value"));

                updatePreferences(filter, pref);

                if (customfieldvalue) {
                    root.find(Selectors.courseView.region)
                        .attr("data-customfieldvalue", customfieldvalue);
                    updatePreferences("customfieldvalue", customfieldvalue);
                }

                const page = document.querySelector(Selectors.region.selectBlock);
                const input = page.querySelector(Selectors.region.searchInput);

                if (input.value !== "") {
                    const clearIcon = page.querySelector(Selectors.region.clearIcon);
                    input.value = "";
                    View.clearSearch(clearIcon, root);
                } else {
                    View.init(root);
                }

                data.originalEvent.preventDefault();
            });

        Selector.on(
    CustomEvents.events.activate,
    SELECTORS.DISPLAY_OPTION,
    (e, data) => {
        const option = $(e.target);

        if (option.hasClass('active')) {
            return;
        }

        const filter = option.attr('data-display-option');
        const pref = option.attr('data-pref');
        const displayValue = option.attr('data-value');

        root.find(SELECTORS.courseView.region).attr('data-display', displayValue);
        updatePreferences(filter, pref);

        if (displayValue === 'carousel') {
            console.log("Switching to Carousel View");
            View.initCarousel(root);  // Call a new function for Carousel view
        } else {
            View.reset(root);
        }

        data.originalEvent.preventDefault();
    }
);
        }
    };
});